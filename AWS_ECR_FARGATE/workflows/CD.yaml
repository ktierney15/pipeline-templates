name: CD
on:
  workflow_dispatch:
  
jobs:
  Pre-Check:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      # Check if you are executing from a branch and exit if so ## MUST EXECUTE FROM TAG ##
      - name: Get branch or tag name
        run: echo "REF_NAME=$(echo ${GITHUB_REF#refs/heads/} | sed 's/\//_/')" >> $GITHUB_ENV

      - name: Check if it's a tag
        run: |
          if [[ -z "${REF_NAME}" ]]; then
            echo "This is not a tag. Exiting..."
            exit 1
          fi

  Deploy:
    needs: Pre-Check
    runs-on: ubuntu-latest
    env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          TF_VAR_docker_user: ${{ secrets.DOCKER_USERNAME }}
          TF_VAR_docker_pass: ${{ secrets.DOCKERHUB_TOKEN }}

    steps:
      - name: print name
        run: echo ${{ github.events.repository.name }} ${{ github.ref }}

      - uses: actions/checkout@v4
        with:
          ref: ${{ github.ref }}

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ECR_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_ECR_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build, tag, and push the image to Amazon ECR
        id: push-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ github.event.repository.name }}
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:latest .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest
          echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:latest"

      - name: Download task definition
        run: aws ecs describe-task-definition --task-definition aws-ecs-${{ github.event.repository.name }}-task --query taskDefinition > task-definition.json

      - name: Fill in the new image ID in the Amazon ECS task definition
        id: update-task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: task-definition.json
          container-name: ${{ github.event.repository.name }}
          image: ${{ steps.push-image.outputs.image }}

      - name: Deploy Amazon ECS task definition
        id: deploy-task-def
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.update-task-def.outputs.task-definition }}
          service: aws-ecs-${{ github.event.repository.name }}-svc
          cluster: aws-ecs-${{ github.event.repository.name }}
          